#labels Featured
# WGS-haplotyping by sequencing -- using mpileup format alignment data and python scripts for filtering, haplotyping, and scaffold splitting

== Introduction ==

The scripts aim to filter out poor SNPs, genotype SNPs (in a primitive way because of the low coverage data), group neighboring SNPs, determine haplotypes for these groups, split the haplotype tables for regions where the haplotypes of the neighboring regions indicate mis-assemblies, and haplotype the resulting scaffolds.

Required software: CLC (for identification and filtering of parental SNPs), BWA  (or another aligner: e.g. CLC, Bowtie, … to generate alignments as BAM files ), Samtools (to generate mpileup files), Python (v2.XX), Excel (for data visualization).   Most of the python scripts have some documentation inside in the comments.  The thresholds for filtering and genotyping might have to be adjusted depending on data sets – please modify these settings by editing the scripts.

== Link to Scripts ==

  * [http://xuhu-rwm-map.googlecode.com/svn/trunk/01-CLC_Table_Converter.py 01-CLC_Table_Converter.py]
  * [http://xuhu-rwm-map.googlecode.com/svn/trunk/02-GenotypingParser.py 02-GenotypingParser.py]
  * [http://xuhu-rwm-map.googlecode.com/svn/trunk/03-SumByGroup.py 03-SumByGroup.py]
  * [http://xuhu-rwm-map.googlecode.com/svn/trunk/04-GroupHaplotyper.py 04-GroupHaplotyper.py]
  * [http://xuhu-rwm-map.googlecode.com/svn/trunk/05-ScaffoldSplit.py 05-ScaffoldSplit.py]

== Details Steps ==

  # Alignments of parental reads in CLC and filtering of HQ-SNPs as detailed in Alex’s powerpoint slides (email from May 23rd) .   Export the resulting table of the positions of HQ SNPs in the reference out of CLC.  Crate a BED file from thse data (extract the first two columns and add an extra column to the table) with the 01-CLC_Table_Converter.py script:
{{{
python 01-CLC-to-BED-file.py &
}}}
  # For each RIL/sample carry out paired-end alignments (for example with BWA).  
   An index of the reference had to be generated first for example in BWA with:
{{{
bwa index -p index-prefix  -a bwtsw  ref_genome.fa &
}}}
   Then do the alignments with:
{{{
bwa mem -t 2 -w 5  ref_genome.fa read1.fq read2.fq > aln-pe.sam
}}}
  # Convert the generated SAM files to a sorted BAM files:
{{{
samtools view -uS sample1.sam | samtools sort - outputPrefix
}}}
  # Analyze the variants for the HQ-SNPs and combine the data of all samples into a single table - the “mpileup” file:
{{{
samtools mpileup -Q 10 -I -l HQ_SNP_loci_BED-file.tsv -f ref_genome.fa  sample1.bam sample2.bam sample3.bam etc_all_samples.bam…. > all_samples.mpileup
}}}
  # Use the 02-GenotypingParser.py script to generate two tables from mpileup file: One table with the SNP-counts per cell of the table ( ”parsed~”) and one of the genotype calls ( ”genotyped~”).  The script will also remove SNPs from the tables for which the genotyping data show alignments to indels.  Generate the count and genotype tables with:
{{{
python 02-GenotyperCleaner.py  all_samples.mpileup number_of_samples 0 &
}}}
   Optional: if the last parameter is set to 1 , this script removes SNPs with obvious artifacts (low efficiency, very skewed genotype ratio, etc.),and two extra files will be generated: one with the genotype counts per SNP (“GTcounts_” to aid the QC of the data) and one a new genotype table from which the artifactual SNPs have been removed ( “cleanedGTs_”).
{{{
python 02-GenotyperCleaner.py  all_samples.mpileup number_of_samples 1 &
}}}
   The following thresholds per SNP are hard-coded in the script, but can be easily edited:
   * if more than one sample displays an indel in the alignment, the SNP will be removed; the data point containing the indel will be set to “missing data” in any case
   * if data for more than 80% of the samples are missing (M), the SNP will be removed.
   * if more than 5% of the samples are genotyped as heterozygous (U), the SNP will be removed.
   * if the genotyping data are very skewed (minor allele frequency < 10%), the SNP will be removed.
  # Summarize the genotype data for groups of SNPs along the reference sequence – for example for groups of 20 consecutive SNPs. 
{{{  
python 03-SumByGroup.py cleaned-genotype-table.tsv number_of_SNPs_per_group  &
}}}
  # Convert the group counts into group haplotypes with the 04-GroupHaplotyper.py script.  The haplotyping thresholds are hardcoded in the script and should be edited there.  If the B/A call ratio is between 0.2 and 5, the group is typed as heterozygous; if it is lower than 0.2 the haplotype is set to A; if it is bigger than 5, the haplotype is set to B:
{{{
python  04-GroupHaplotyper.py  chunked-clean-genotype-table.tsv  number-of-samples &
}}}
  # Import the generated table into Excel and use conditional formatting for A’s , B’s and U’s visualize the genotype data like this:
  # Split the mis-assembled scaffolds with 05-ScaffoldSplit at SNP-groups that show a high number of differences (e.g. for more than 25% of the samples) to their neighboring SNP-groups.  The SNP-group a the edge is removed.  The new scaffolds will get a new unique name.   As the cutoff-number one can choose the number of allowed differences between the haplotypes of adjacent SNP groups (for example: 25 ### for 88 samples).
{{{
python  05-ScaffoldSplit.py  SNP-group-table.tsv  number-of-samples cutoff-number &
}}}
   As a result, the scaffold in the middle of the above picture is now split into two scaffolds and both can be mapped independently.
  # For mapping purposes a haplotype table for the split scaffolds can be generated with: